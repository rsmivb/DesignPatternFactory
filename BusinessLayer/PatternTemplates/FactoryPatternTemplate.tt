<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
// This is the output code from FactoryTemplate. Created by DesignPatternFactory tool developed by Rafael S. Mesquita 2017 -  mesquita.cob@gmail.com
// you only get syntax-highlighting here - not intellisense
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
namespace Factory.Pattern
{
	public class Client
	{
		public void Main ()
		{
			IFactory factory = new Factory();
			// using Reflections to generate object based on object name
			IObject obj = factory.CreateObject(string objectType);
			obj.GenerateObject();
		}
	 }
	public interface IFactory
	{
		IObject CreateObject(string objectType);
	}
	public interface IObject
	{
		void GenerateObject();
	}
	public class Factory : IFactory
	{
		public string MyProperty{ get; set; }
		public Factory()
		{
		}
		public IObject CreateObject(string objectType)
		{
			return Assembly.GetExecutingAssembly().CreateInstance(objectType, true) as IObject;
		}
	}
	public class Object : IObject
	{
		public string MyProperty{ get; set; }

		public Object()
		{
		}

		public void GenerateObject()
		{
			//TODO
		}
	}
}